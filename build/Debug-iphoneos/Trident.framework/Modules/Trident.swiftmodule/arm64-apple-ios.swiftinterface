// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Trident
import Combine
import CommonCrypto
import CoreLocation
import CryptoKit
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
@_exported import Trident
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class CustomFontStyle : ObjectiveC.NSObject {
  public static let BOLD: Swift.String
  public static let SEMIBOLD: Swift.String
  public static let REGULAR: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class FontCustomization : ObjectiveC.NSObject {
  public init(regular: Swift.String?, semibold: Swift.String?, bold: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13.0, *)
@objc public protocol Transaction {
  @objc func getAuthenticationRequestParameters() throws -> Trident.AuthenticationRequestParameters
  @objc func doChallenge(viewController: UIKit.UIViewController, challengeParameters: Trident.ChallengeParameters, challengeStatusReceiver: any Trident.ChallengeStatusReceiver, timeOut: Swift.Int) throws
  @objc func getProgressView() throws -> Trident.ProgressDialog
  @objc func close()
  @objc func registerForLoaderEvents(loaderEventHandler: @escaping (Swift.Bool) -> Swift.Void)
}
@objc public protocol ChallengeStatusReceiver {
  @objc func completed(_ completionEvent: Trident.CompletionEvent)
  @objc func cancelled()
  @objc func timedout()
  @objc func protocolError(_ protocolErrorEvent: Trident.ProtocolErrorEvent)
  @objc func runtimeError(_ runtimeErrorEvent: Trident.RuntimeErrorEvent)
}
@objc public class RuntimeErrorEvent : ObjectiveC.NSObject {
  @objc public var errorCode: Swift.String
  @objc public var errorMessage: Swift.String
  @objc public init(_ errorCode: Swift.String?, _ errorMessage: Swift.String)
  @objc public func getErrorCode() -> Swift.String?
  @objc public func getErrorMessage() -> Swift.String
  @objc deinit
}
@objc public class ProtocolErrorEvent : ObjectiveC.NSObject {
  @objc public var sdkTransactionID: Swift.String
  @objc public var errorMessage: Trident.ErrorMessage
  @objc public init(_ sdkTransactionID: Swift.String, _ errorMessage: Trident.ErrorMessage)
  @objc public func getErrorMessage() -> Trident.ErrorMessage
  @objc public func getSDKTransactionID() -> Swift.String
  @objc deinit
}
@objc public class CompletionEvent : ObjectiveC.NSObject {
  @objc public var sdkTransactionID: Swift.String
  @objc public var transactionStatus: Swift.String
  @objc public init(_ sdkTransactionID: Swift.String, _ transactionStatus: Swift.String)
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getTransactionStatus() -> Swift.String
  @objc deinit
}
@objc public class ToolbarCustomization : ObjectiveC.NSObject {
  @objc public init(headerColor: Swift.String? = nil, headerText: Swift.String? = nil, backgroundColor: Swift.String? = nil, buttonText: Swift.String? = nil, textFontSize: Foundation.NSNumber? = nil, useCloseIcon: Foundation.NSNumber? = nil, closeIconColor: Swift.String? = nil, fontStyle: Swift.String? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc public class ProgressDialog : ObjectiveC.NSObject {
  @objc public func start()
  @objc public func stop()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class CancelPopupCustomization : ObjectiveC.NSObject {
  @objc public init(continueButtonCustomization: Trident.ButtonCustomization? = nil, exitButtonCustomization: Trident.ButtonCustomization? = nil, headerTextCustomization: Trident.TextCustomization? = nil, contentTextCustomization: Trident.TextCustomization? = nil, headerText: Swift.String? = nil, labelText: Swift.String? = nil, exitButtonText: Swift.String? = nil, continueButtonText: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class TransactionImpl : ObjectiveC.NSObject, Trident.Transaction {
  @objc public func getAuthenticationRequestParameters() throws -> Trident.AuthenticationRequestParameters
  @objc public func doChallenge(viewController: UIKit.UIViewController, challengeParameters: Trident.ChallengeParameters, challengeStatusReceiver: any Trident.ChallengeStatusReceiver, timeOut: Swift.Int) throws
  @objc public func getProgressView() throws -> Trident.ProgressDialog
  @objc public func close()
  @objc public func registerForLoaderEvents(loaderEventHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
@objc public class TextBoxCustomization : ObjectiveC.NSObject {
  @objc public init(textColor: Swift.String? = nil, textSpacing: Foundation.NSNumber? = nil, fontName: Swift.String? = nil, borderColor: Swift.String? = nil, borderWidth: Foundation.NSNumber? = nil, cornerRadius: Foundation.NSNumber? = nil, useBoxedLayout: Foundation.NSNumber? = nil, focusedColor: Swift.String? = nil, fontSize: Foundation.NSNumber? = nil, hintTextColor: Swift.String? = nil, useNumericInputField: Foundation.NSNumber? = nil, fontStyle: Swift.String? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ConfigParameters : ObjectiveC.NSObject {
  @objc public func addParam(_ group: Swift.String?, _ paramName: Swift.String, _ paramValue: Swift.String?) throws
  @objc public func getParamValue(_ group: Swift.String?, _ paramName: Swift.String) throws -> Swift.String
  @objc public func removeParam(_ group: Swift.String?, _ paramName: Swift.String) throws -> Swift.String
  @objc public var fixOrIgnoreInvalidCRes: Swift.Bool
  @objc public var fixTextMasqueradingAsOobIssue: Swift.Bool
  @objc public var certificateAPITimeout: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ButtonType : Swift.Int {
  case submit
  case `continue`
  case next
  case cancel
  case resend
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class ButtonCustomization : ObjectiveC.NSObject {
  @objc public init(backgroundColor: Swift.String? = nil, textColor: Swift.String? = nil, cornerRadius: Foundation.NSNumber? = nil, fontSize: Foundation.NSNumber? = nil, fontName: Swift.String? = nil, showCapitalizedText: Foundation.NSNumber? = nil, fontStyle: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
@objc public class AuthenticationRequestParameters : ObjectiveC.NSObject {
  @objc final public let sdkTransactionID: Swift.String
  @objc final public let deviceData: Swift.String
  @objc final public let sdkEphemeralPublicKey: Swift.String
  @objc final public let sdkAppID: Swift.String
  @objc final public let sdkReferenceNumber: Swift.String
  @objc final public let messageVersion: Swift.String
  @objc deinit
}
@available(iOS 13.0, *)
@objc public protocol ThreeDS2Service {
  @objc func initialize(configParameters: Trident.ConfigParameters, locale: Swift.String?, uiCustomization: Trident.UICustomization?, certificateDelegate: (any Trident.CertificateDelegate)?) throws
  @objc func createTransaction(directoryServerId: Swift.String, messageVersion: Swift.String?) throws -> any Trident.Transaction
  @objc func cleanup() throws
  @objc func getSDKVersion() throws -> Swift.String
  @objc func getWarnings() throws -> Swift.Array<Trident.Warning>
}
@available(iOS 13.0, *)
@objc public protocol TridentLoggerDelegate {
  @objc func trackEvent(withLevel level: Swift.String, label: Swift.String, value: Swift.Dictionary<Swift.String, Any>, category: Swift.String, subcategory: Swift.String)
}
@objc public enum Severity : Swift.Int {
  case low
  case medium
  case high
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class Warning : ObjectiveC.NSObject {
  @objc public var severity: Trident.Severity
  @objc override dynamic public init()
  @objc public func getID() -> Swift.String
  @objc public func getMessage() -> Swift.String
  @objc public func getSeverity() -> Trident.Severity
  @objc public func setID(_ id: Swift.String)
  @objc public func setMessage(_ message: Swift.String)
  @objc deinit
}
@available(iOS 13.0, *)
@objc public class UICustomization : ObjectiveC.NSObject {
  @objc public init(toolbarCustomization: Trident.ToolbarCustomization? = nil, submitButtonCustomization: Trident.ButtonCustomization? = nil, resendButtonCustomization: Trident.ButtonCustomization? = nil, labelCustomization: Trident.LabelCustomization? = nil, fontCustomization: Trident.FontCustomization? = nil, textBoxCustomization: Trident.TextBoxCustomization? = nil, cancelPopupCustomization: Trident.CancelPopupCustomization? = nil)
  @objc deinit
}
@available(iOS 13.0, *)
@objc public class TridentSDK : ObjectiveC.NSObject, Trident.ThreeDS2Service {
  @objc public init(logger: (any Trident.TridentLoggerDelegate)? = nil)
  @objc public func initialize(configParameters: Trident.ConfigParameters, locale: Swift.String?, uiCustomization: Trident.UICustomization?, certificateDelegate: (any Trident.CertificateDelegate)? = nil) throws
  @objc public func createTransaction(directoryServerId: Swift.String, messageVersion: Swift.String?) throws -> any Trident.Transaction
  @objc public func cleanup() throws
  @objc public func getSDKVersion() throws -> Swift.String
  @objc public func getWarnings() throws -> Swift.Array<Trident.Warning>
  @objc public func getDirectoryServerId(cardNetwork: Swift.String) throws -> Swift.String
  @objc deinit
}
@objc public protocol CertificateDelegate {
  @objc func didFinishDownloadingCertificate(downloaded: Swift.Bool)
}
@objc public class TextCustomization : ObjectiveC.NSObject {
  @objc public init(textColor: Swift.String? = nil, fontSize: Foundation.NSNumber? = nil, fontStyle: Swift.String? = nil)
  @objc deinit
}
@objc public class LabelCustomization : ObjectiveC.NSObject {
  @objc public init(challengeHeader: Trident.TextCustomization? = nil, challengeContent: Trident.TextCustomization? = nil, challengeLabel: Trident.TextCustomization? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ChallengeParameters : ObjectiveC.NSObject {
  @objc public var threeDSServerTransactionID: Swift.String
  @objc public var acsTransactionID: Swift.String
  @objc public var acsRefNumber: Swift.String
  @objc public var acsSignedContent: Swift.String
  @objc public var threeDSRequestorAppURL: Swift.String
  @objc public func get3DSServerTransactionID() -> Swift.String
  @objc public func getAcsTransactionID() -> Swift.String
  @objc public func getAcsRefNumber() -> Swift.String
  @objc public func getAcsSignedContent() -> Swift.String
  @objc public func getThreeDSRequestorAppURL() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public enum Exception : Swift.Error {
  case invalidInput
  case sdkAlreadyInitialized
  case sdkNotInitialized
  case sdkRuntime
  public static func == (a: Trident.Exception, b: Trident.Exception) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class ErrorMessage : ObjectiveC.NSObject {
  @objc public var transactionID: Swift.String
  @objc public var errorCode: Swift.String
  @objc public var errorDescription: Swift.String
  @objc public var errorDetail: Swift.String
  @objc public init(_ transactionID: Swift.String, _ errorCode: Swift.String, _ errorDescription: Swift.String, _ errorDetail: Swift.String)
  @objc public func getTransactionID() -> Swift.String
  @objc public func getErrorCode() -> Swift.String
  @objc public func getErrorDescription() -> Swift.String
  @objc public func getErrorDetails() -> Swift.String
  @objc deinit
}
extension Trident.ButtonType : Swift.Equatable {}
extension Trident.ButtonType : Swift.Hashable {}
extension Trident.ButtonType : Swift.RawRepresentable {}
extension Trident.Severity : Swift.Equatable {}
extension Trident.Severity : Swift.Hashable {}
extension Trident.Severity : Swift.RawRepresentable {}
extension Trident.Exception : Swift.Equatable {}
extension Trident.Exception : Swift.Hashable {}
